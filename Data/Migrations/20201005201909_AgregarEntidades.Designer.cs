// <auto-generated />
using System;
using Lavadero.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Lavadero.Data.Migrations
{
    [DbContext(typeof(LavaderoDbContext))]
    [Migration("20201005201909_AgregarEntidades")]
    partial class AgregarEntidades
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lavadero.Models.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nombreCliente");

                    b.Property<int>("telefonoCliente");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.ConceptoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionConceptoPago");

                    b.Property<DateTime>("fechaBajaConceptoPago");

                    b.Property<string>("nombreConceptoPago");

                    b.HasKey("Id");

                    b.ToTable("ConceptoPago");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ServicioId");

                    b.Property<int>("dniEmpleado");

                    b.Property<DateTime?>("fechaBaja");

                    b.Property<string>("nombreEmpleado");

                    b.Property<int?>("tipoEmpleadoId");

                    b.HasKey("Id");

                    b.HasIndex("ServicioId");

                    b.HasIndex("tipoEmpleadoId");

                    b.ToTable("Empleado");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.EmpleadoConceptoPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpleadoId");

                    b.Property<int?>("conceptoPagoId");

                    b.Property<DateTime>("fechaHoraFinEmpleadoConceptoPago");

                    b.Property<DateTime>("fechaHoraInicioEmpleadoConceptoPago");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("conceptoPagoId");

                    b.ToTable("EmpleadoConceptoPago");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.EstadoOrdenServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrdenServicioId");

                    b.Property<DateTime>("fechaHoraFinEstadoOrdenServicio");

                    b.Property<DateTime>("fechaHoraInicioEstadoOrdenServicio");

                    b.Property<int?>("ordenServicioEstadoId");

                    b.HasKey("Id");

                    b.HasIndex("OrdenServicioId");

                    b.HasIndex("ordenServicioEstadoId");

                    b.ToTable("EstadoOrdenServicio");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.MovimientoCaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PlayaId");

                    b.Property<DateTime>("fechaHoraMovimientoCaja");

                    b.Property<int>("tipoMovimientoCaja");

                    b.HasKey("Id");

                    b.HasIndex("PlayaId");

                    b.ToTable("MovimientoCaja");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.OrdenServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("fechaHoraEgreso");

                    b.Property<DateTime>("fechaHoraIngreso");

                    b.Property<int?>("vehiculoId");

                    b.HasKey("Id");

                    b.HasIndex("vehiculoId");

                    b.ToTable("OrdenServicio");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.OrdenServicioEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nombreOrdenServicioEstado");

                    b.HasKey("Id");

                    b.ToTable("OrdenServicioEstado");

                    b.HasData(
                        new { Id = 1, nombreOrdenServicioEstado = "EnProceso" },
                        new { Id = 2, nombreOrdenServicioEstado = "Ejecutada" },
                        new { Id = 3, nombreOrdenServicioEstado = "Cancelada" }
                    );
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.OrdenServicioServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrdenServicioId");

                    b.Property<int?>("servicioId");

                    b.HasKey("Id");

                    b.HasIndex("OrdenServicioId");

                    b.HasIndex("servicioId");

                    b.ToTable("OrdenServicioServicio");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Pertenencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("VehiculoId");

                    b.Property<string>("descripcionPertenencia");

                    b.Property<string>("nombrePertenencia");

                    b.Property<int?>("tipoPertenenciaId");

                    b.HasKey("Id");

                    b.HasIndex("VehiculoId");

                    b.HasIndex("tipoPertenenciaId");

                    b.ToTable("Pertenencia");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Playa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("estadoPlaya");

                    b.Property<string>("nombrePlaya");

                    b.Property<int?>("playaEstadoId");

                    b.Property<string>("ubicacionPlaya");

                    b.HasKey("Id");

                    b.HasIndex("playaEstadoId");

                    b.ToTable("Playa");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.PlayaEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmpleadoId");

                    b.Property<DateTime>("fechaHoraFinPlayaEmpleado");

                    b.Property<DateTime>("fechaHoraInicioPlayaEmpleado");

                    b.Property<int?>("playaId");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("playaId");

                    b.ToTable("PlayaEmpleado");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.PlayaEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nombrePlayaEstado");

                    b.HasKey("Id");

                    b.ToTable("PlayaEstado");

                    b.HasData(
                        new { Id = 1, nombrePlayaEstado = "Abierta" },
                        new { Id = 2, nombrePlayaEstado = "Cerrada" },
                        new { Id = 3, nombrePlayaEstado = "Cerrada" }
                    );
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Reclamo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId");

                    b.Property<string>("observacion");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Reclamo");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionServicio");

                    b.Property<DateTime>("fechaBajaServicio");

                    b.Property<string>("nombreServicio");

                    b.Property<int?>("tipoServicioId");

                    b.HasKey("Id");

                    b.HasIndex("tipoServicioId");

                    b.ToTable("Servicio");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.TipoEmpleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionTipoEmpleado");

                    b.Property<DateTime>("fechaBajaTipoEmpleado");

                    b.Property<string>("nombreTipoEmpleado");

                    b.HasKey("Id");

                    b.ToTable("TipoEmpleado");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.TipoPertenencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionTipoPertenencia");

                    b.Property<DateTime>("fechaBajaTipoPertenencia");

                    b.Property<string>("nombreTipoPertenencia");

                    b.HasKey("Id");

                    b.ToTable("TipoPertenencia");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.TipoServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionTipoServicio");

                    b.Property<DateTime>("fechaBajaTipoServicio");

                    b.Property<string>("nombreTipoServicio");

                    b.HasKey("Id");

                    b.ToTable("TipoServicio");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.TipoVehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("descripcionTipoVehiculo");

                    b.Property<DateTime>("fechaBajaTipoVehiculo");

                    b.Property<string>("nombreTipoVehiculo");

                    b.HasKey("Id");

                    b.ToTable("TipoVehiculo");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Vehiculo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("clienteId");

                    b.Property<string>("colorVehiculo");

                    b.Property<string>("marcaVehiculo");

                    b.Property<string>("modeloVehiculo");

                    b.Property<string>("patenteVehiculo");

                    b.Property<int?>("playaId");

                    b.Property<int?>("tipoVehiculoId");

                    b.HasKey("Id");

                    b.HasIndex("clienteId");

                    b.HasIndex("playaId");

                    b.HasIndex("tipoVehiculoId");

                    b.ToTable("Vehiculo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Empleado", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Servicio")
                        .WithMany("empleado")
                        .HasForeignKey("ServicioId");

                    b.HasOne("Lavadero.Models.Entidades.TipoEmpleado", "tipoEmpleado")
                        .WithMany()
                        .HasForeignKey("tipoEmpleadoId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.EmpleadoConceptoPago", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Empleado")
                        .WithMany("empleadoConceptoPago")
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("Lavadero.Models.Entidades.ConceptoPago", "conceptoPago")
                        .WithMany()
                        .HasForeignKey("conceptoPagoId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.EstadoOrdenServicio", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.OrdenServicio")
                        .WithMany("estadoOrdenServicio")
                        .HasForeignKey("OrdenServicioId");

                    b.HasOne("Lavadero.Models.Entidades.OrdenServicioEstado", "ordenServicioEstado")
                        .WithMany()
                        .HasForeignKey("ordenServicioEstadoId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.MovimientoCaja", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Playa")
                        .WithMany("movimientoCaja")
                        .HasForeignKey("PlayaId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.OrdenServicio", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Vehiculo", "vehiculo")
                        .WithMany()
                        .HasForeignKey("vehiculoId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.OrdenServicioServicio", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.OrdenServicio")
                        .WithMany("ordenServicioServicio")
                        .HasForeignKey("OrdenServicioId");

                    b.HasOne("Lavadero.Models.Entidades.Servicio", "servicio")
                        .WithMany()
                        .HasForeignKey("servicioId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Pertenencia", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Vehiculo")
                        .WithMany("pertenencia")
                        .HasForeignKey("VehiculoId");

                    b.HasOne("Lavadero.Models.Entidades.TipoPertenencia", "tipoPertenencia")
                        .WithMany()
                        .HasForeignKey("tipoPertenenciaId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Playa", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.PlayaEstado", "playaEstado")
                        .WithMany()
                        .HasForeignKey("playaEstadoId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.PlayaEmpleado", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Empleado")
                        .WithMany("playaEmpleado")
                        .HasForeignKey("EmpleadoId");

                    b.HasOne("Lavadero.Models.Entidades.Playa", "playa")
                        .WithMany()
                        .HasForeignKey("playaId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Reclamo", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Cliente")
                        .WithMany("reclamo")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Servicio", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.TipoServicio", "tipoServicio")
                        .WithMany()
                        .HasForeignKey("tipoServicioId");
                });

            modelBuilder.Entity("Lavadero.Models.Entidades.Vehiculo", b =>
                {
                    b.HasOne("Lavadero.Models.Entidades.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteId");

                    b.HasOne("Lavadero.Models.Entidades.Playa", "playa")
                        .WithMany()
                        .HasForeignKey("playaId");

                    b.HasOne("Lavadero.Models.Entidades.TipoVehiculo", "tipoVehiculo")
                        .WithMany()
                        .HasForeignKey("tipoVehiculoId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
